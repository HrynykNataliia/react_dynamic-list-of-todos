{"version":3,"sources":["types/TodoStatus.ts","components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","components/SearchForm/SearchForm.tsx","App.tsx","index.tsx"],"names":["TodoStatus","TodoList","todos","selectedUserId","onCheck","onSelectUser","className","map","todo","classNames","completed","type","checked","onChange","id","title","userId","onClick","request","endpoint","a","url","fetch","response","json","data","console","error","getTodos","isCompleted","undefined","getUser","user","CurrentUser","state","userNotFoundError","isLoading","this","loadUser","prevProps","props","setState","name","email","phone","onClear","React","Component","SearchForm","query","todoStatus","value","All","Active","Completed","App","checkTodo","todoId","selectUser","changeHandler","event","target","filterTodos","filterTodosByStatus","filter","includes","_prevProps","prevState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebef904c.chunk.js","sourcesContent":["export enum TodoStatus {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  selectedUserId: number,\n  onCheck: (todoId: number) => void,\n  onSelectUser: (userId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedUserId,\n  onCheck,\n  onSelectUser,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            className={classNames(\n              'TodoList__item',\n              {\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              },\n            )}\n            key={todo.id}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={() => onCheck(todo.id)}\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={classNames(\n                'button',\n                'TodoList__user-button',\n                { 'TodoList__user-button--selected': selectedUserId === 0 || todo.userId === selectedUserId },\n              )}\n              type=\"button\"\n              onClick={() => onSelectUser(todo.userId)}\n            >\n              {`User #${todo.userId}`}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","export const request = async <T>(endpoint: string): Promise<T> => {\n  const url = `https://mate.academy/students-api/${endpoint}`;\n\n  try {\n    const response = await fetch(url);\n    const data: T = await response.json();\n\n    return data;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n\n    throw error;\n  }\n};\n\nexport const getTodos = async (isCompleted: boolean | undefined = undefined): Promise<Todo[]> => {\n  let endpoint = 'todos';\n\n  if (isCompleted !== undefined) {\n    endpoint += `?completed=${isCompleted}`;\n  }\n\n  const todos: Todo[] = await request(endpoint);\n\n  return todos;\n};\n\nexport const getUser = async (userId: number): Promise<User> => {\n  const endpoint = `users/${userId}`;\n\n  const user: User = await request(endpoint);\n\n  return user;\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  onClear: () => void,\n};\n\ntype State = {\n  user: User | null,\n  userNotFoundError: boolean,\n  isLoading: boolean,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n    userNotFoundError: false,\n    isLoading: false,\n  };\n\n  async componentDidMount() {\n    await this.loadUser();\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      await this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    try {\n      this.setState({\n        isLoading: true,\n        userNotFoundError: false,\n      });\n      const user = await getUser(this.props.userId);\n\n      this.setState({\n        user,\n        isLoading: false,\n      });\n    } catch (error) {\n      this.setState({\n        userNotFoundError: true,\n      });\n    }\n  }\n\n  render() {\n    const { user, userNotFoundError, isLoading } = this.state;\n\n    if (userNotFoundError) {\n      return (\n        <span>404: User is not found</span>\n      );\n    }\n\n    if (isLoading || !user) {\n      return (\n        <span>Loading...</span>\n      );\n    }\n\n    const {\n      id,\n      name,\n      email,\n      phone,\n    } = user as User;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${id}`}</span></h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'CurrentUser__clear',\n            'button',\n            'TodoList__user-button',\n            'TodoList__user-button--selected',\n          )}\n          onClick={() => this.props.onClear()}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { TodoStatus } from '../../types/TodoStatus';\nimport './SearchForm.scss';\n\ntype Props = {\n  query: string,\n  todoStatus: TodoStatus,\n  onChange: (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => void,\n};\n\nexport const SearchForm: React.FC<Props> = ({\n  query,\n  todoStatus,\n  onChange,\n}) => (\n  <form className=\"form\">\n    <input\n      type=\"text\"\n      value={query}\n      name=\"query\"\n      onChange={onChange}\n      className=\"input is-link\"\n    />\n\n    <div className=\"select\">\n      <select\n        name=\"todoStatus\"\n        value={todoStatus}\n        onChange={onChange}\n      >\n        <option value={TodoStatus.All}>All</option>\n        <option value={TodoStatus.Active}>Active</option>\n        <option value={TodoStatus.Completed}>Completed</option>\n      </select>\n    </div>\n  </form>\n);\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\nimport { SearchForm } from './components/SearchForm/SearchForm';\nimport { TodoStatus } from './types/TodoStatus';\n\ntype State = {\n  selectedUserId: number,\n  todos: Todo[],\n  query: string,\n  todoStatus: TodoStatus,\n};\n\ntype Props = {};\n\nclass App extends React.Component<Props, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    query: '',\n    todoStatus: TodoStatus.All,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({\n      todos,\n    });\n  }\n\n  async componentDidUpdate(_prevProps: Props, prevState: State) {\n    if (this.state.query !== prevState.query\n      || this.state.todoStatus !== prevState.todoStatus) {\n      await this.filterTodos();\n    }\n  }\n\n  checkTodo = (todoId: number) => {\n    this.setState(({ todos }) => ({\n      todos: todos.map(todo => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  };\n\n  selectUser = (selectedUserId = 0) => {\n    this.setState({ selectedUserId });\n  };\n\n  changeHandler = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    } as Pick<State, 'query' | 'todoStatus'>);\n  };\n\n  filterTodos = async () => {\n    const { query } = this.state;\n    const todos = await this.filterTodosByStatus();\n\n    this.setState({\n      todos: todos.filter(todo => todo.title.includes(query)),\n    });\n  };\n\n  filterTodosByStatus = async (): Promise<Todo[]> => {\n    const { todoStatus } = this.state;\n\n    switch (todoStatus) {\n      case TodoStatus.Active:\n        return getTodos(false);\n      case TodoStatus.Completed:\n        return getTodos(true);\n      default:\n        return getTodos();\n    }\n  };\n\n  render() {\n    const {\n      selectedUserId,\n      todos,\n      query,\n      todoStatus,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <SearchForm\n            query={query}\n            todoStatus={todoStatus}\n            onChange={this.changeHandler}\n          />\n\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            onCheck={this.checkTodo}\n            onSelectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClear={this.selectUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}